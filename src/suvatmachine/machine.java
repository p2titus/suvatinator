/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package suvatmachine;

/**
 *
 * @author p2titus (original idea from friend)
 */
public class machine extends javax.swing.JFrame
{

    /**
     * Creates new form machine
     */
    public machine() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jButton4.setText("jButton4");

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Displacement (s)");

        jLabel2.setText("Initial Velocity (u)");

        jLabel3.setText("Final Velocity (v)");

        jLabel4.setText("Acceleration (a)");

        jLabel5.setText("Time (t)");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Calculate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Clear Fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        suvat();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        clear();
    }//GEN-LAST:event_jButton3ActionPerformed

    
    private void suvat() // requires three values
    {// TODO - fix time code
        boolean[] enteredValue = checkText(); // order: suvat // fixed
        int numOfQuanEnt = numOfQuan(enteredValue);
        if(numOfQuanEnt <3) // awwwwwwwwwwwwwwww
        {
            String[] errors = fillWith(5, "Too few values entered");
            displaySuvatError(enteredValue, errors);
        }
        
        else if(numOfQuanEnt > 3) // no joke here
        {
            String[] errors = fillWith(5, "Too many values entered");
            boolean[] toReplace = new boolean[5];
            displaySuvatError(toReplace, errors);
        }
        
        else
        {
            typeEquationThree(enteredValue);
        }
    }
    
    private void clear()
    {
        String[] empty = fillWith(5, "");
        boolean[] clearAll = new boolean[5];
        displaySuvatError(clearAll, empty);
    }
    
    /* begin equation solving // TODO - equation solving section
    ** sorts which suvat equation to use
    ** avoid displacement velocity equations where possible
    ** equations:
    ** v = u + at
    ** v^2 = u^2 + 2as
    ** s = (u + v) / t
    ** TO AVOID
    ** s = ut + 1/2at^2
    ** s = vt - 1/2at^2
    ** 
    */
    
    private void typeEquationThree(boolean[] enteredValues)
    { // sometimes two times - need to incorporate before programming time finding equations
        double[] quan = fetchValues(enteredValues);
        double[] results = new double[2];
        int counter = 0;
        
        if(enteredValues[3] == false) // won't have to worry about accel - no chance of two answers
        { // section fully works
            if(enteredValues[0] == false) // no displacement (s)
            {
                double u = quan[1];
                double v = quan[2];
                double t = quan[4];
                
                results[counter] = acclUVT(u, v, t);
                quan[3] = results[counter];
                jTextField4.setText(Double.toString(results[counter]));
                counter++;
                enteredValues[3] = true;
            }
            
            else if(enteredValues[1] == false) // no initial velocity (u)
            {
                double s = quan[0];
                double v = quan[2];
                double t = quan[4];
                
                results[counter] = acclSVT(s, v, t);
                quan[3] = results[counter];
                
                jTextField4.setText(Double.toString(results[counter]));
                counter++;
                enteredValues[3] = true;
            }
            
            else if(enteredValues[2] == false) // no final velocity (v)
            {
                double s = quan[0];
                double u = quan[1];
                double t = quan[4];
                
                results[counter] = acclSUT(s, u, t);
                quan[3] = results[counter];
                
                jTextField4.setText(Double.toString(results[counter]));
                counter++;
                enteredValues[3] = true;
            }
            
            else// if(enteredValues[4] == false) // no time (t)
            {
                double s = quan[0];
                double u = quan[1];
                double v = quan[2];
                
                results[counter] = acclSUV(s, u, v);
                quan[3] = results[counter];
                
                jTextField4.setText(Double.toString(results[counter]));
                counter++;
                enteredValues[3] = true;
            }
        }
        
        // definitely have acceleration by this point
        
        if(enteredValues[0] == false) // displacement - also don't have to worry about two values
        { // section unfinished - TODO write correctly
            if(enteredValues[1] == false) // no initial velocity (u)
            {
                double v = quan[2];
                double a = quan[3];
                double t = quan[4];
                
                results[counter] = dispVAT(v, a, t);
                quan[0] = results[counter];
                
                jTextField1.setText(Double.toString(results[counter]));
                counter++;
                enteredValues[0] = true;
            }
            
            else if(enteredValues[2] == false) // no final velocity (v)
            {
                double u = quan[1];
                double a = quan[3];
                double t = quan[4];
                
                results[counter] = dispUAT(u, a, t);
                quan[0] = results[counter];
                
                jTextField1.setText(Double.toString(results[counter]));
                counter++;
                enteredValues[0] = true;
            }
            
            else//if(enteredValues[4] == false) // no time (t)
            {
                double u = quan[1];
                double v = quan[2];
                double a = quan[3];
                
                results[counter] = dispUVA(u, v, a);
                quan[0] = results[counter];
                
                jTextField1.setText(Double.toString(results[counter]));
                counter++;
                enteredValues[0] = true;
            }
        }
        
        if(numOfQuan(enteredValues) == 3) // if only s, a and one other
        {// with displacement, acceleration and one other, the other two values have two possible values
            suvatMultiple(quan, enteredValues);// TODO - finish function dealing with multiple outcome suvat
        }
        
        else
        {
            if(enteredValues[1] == false) // no initial velocity
            {//have s, have a, have two other quantities
                double v = quan[2];
                double a = quan[3];
                double t = quan[4];
                
                results[counter] = initVAT(v, a, t);
                quan[1] = results[counter];
                
                jTextField2.setText(Double.toString(results[counter]));
                counter++;
            }
            
            if(enteredValues[2] == false) // no final velocity
            {//have s, have a, have two other quantities
                double u = quan[1];
                double a = quan[3];
                double t = quan[4];
                
                results[counter] = finUAT(u, a, t);
                quan[2] = results[counter];
                
                jTextField3.setText(Double.toString(results[counter]));
                counter++;
            }
            
            if(enteredValues[4] == false) // no time
            {//have s, have a, have two other quantities
                double u = quan[1];
                double v = quan[2];
                double a = quan[3];
                
                results[counter] = timeUVA(u, v, a);
                quan[4] = results[counter];
                
                jTextField5.setText(Double.toString(results[counter]));
                counter++;
            }
        }
    }
    
    // multiple outcomes section
    
    private void suvatMultiple(double[] quan, boolean[] enteredValues)
    {// 100% have s & a
        double[][] results = new double[2][2]; // two possible results for each unknown
        int counter = 0; // shows which column: only need to know if first or second column
        
        if(enteredValues[1] == false) // if no initial velocity
        {
            if(enteredValues[2] == false) // if no final velocity
            {// want to find u, have s, a, t
                double s = quan[0];
                double a = quan[3];
                double t = quan[4];
                
                results[counter][0] = initSAT(s, a, t);
                quan[1] = results[counter][0];
                enteredValues[1] = true;
                
                jTextField2.setText(Double.toString(results[counter][0]));
                counter++;
            }
            
            if(enteredValues[4] == false) // if no time
            {// want to find u, have s, v, a
                // must used v^2 = u^2 + 2as
                // when square rooting, two solutions
                // both will be displayed
                double s = quan[0];
                double v = quan[2];
                double a = quan[3];
                
                results[counter][0] = initSVA(s, v, a);
                
                if(results[counter][0] != -1)
                {
                    String toDisplay = "±" + Double.toString(results[counter][0]);
                    jTextField2.setText(toDisplay);
                    enteredValues[1] = true;                    
                }
                
                else
                    jTextField2.setText("ERROR: Invalid values");
                
                quan[1] = results[counter][0];
                counter++;
            }
        }
        
        if(enteredValues[2] == false) // no final velocity
        {// by this point, there will be a calculated value for s, u and a 
            // preferably use t as gives definitive answer
            
            if(enteredValues[4] == true) // if you have time
            {
                double s = quan[0];
                double a = quan[3];
                double t = quan[4];
                
                results[counter][0] = finSAT(s, a, t);
                jTextField5.setText(Double.toString(results[counter][0]));
                enteredValues[2] = true;
                
                jTextField3.setText(Double.toString(results[counter][0]));
                counter++;
            }

            else// have s, u and a
            {
                double s = quan[0];
                double u = quan[1]; // hehe
                double a = quan[3];
            
                results[counter][0] = finSUA(s, u, a);
            
                if(results[counter][0] != -1)
                {
                    String toDisplay = "±" + Double.toString(results[counter][0]);
                    jTextField3.setText(toDisplay);
                    enteredValues[2] = true;
                }
            
                else
                    jTextField3.setText("ERROR: Invalid values");
            
                counter++;
            }
        }
        
        if(enteredValues[4] == false) // no time
        {// you got all four other quantities, but you don't know if u or v are positive or negative
            // using s, using a, using u
            
            //calculate as a float
            boolean hasCalc = false;
            double s = quan[0];
            double u = quan[1];
            double a = quan[3];
            double[] ts = {0, 0};
            
            double quada = (0.5 * a);
            double quadb = u;
            double quadc = -s;
            
            if(isQuadSolv(quada, quadb, quadc) == true)
            {
                ts = timeSUA(s, u, a);
                //ts = roundDouble(ts, 5); // TODO - fix function
                hasCalc = true;
            }
            
            if(ts[0] == ts[1] && hasCalc == true)
            {
                jTextField5.setText(Double.toString(ts[0]));
            }
            
            else if(hasCalc == true)
            {
                String toDisplay = Double.toString(ts[0]);
                toDisplay += " & " + Double.toString(ts[1]);
                jTextField5.setText(toDisplay);
            }
            
            else
                jTextField5.setText("ERROR: Invalid Values");
            
        }
    }
    
    // displacement section
    
    private double dispUVA(double u, double v, double a) // original: v^2 = u^2 + 2as
    {// rearranged (v^2 - u^2) / 2a
        return ((Math.pow(v, 2)) - (Math.pow(u, 2))) / (2 * a);
    }
    
    /*private double dispUVT(double u, double v, double t) // original: s = (u + v) / t
    {// used as original
        return (u + v) / t;
    }//*/ // not needed due to acceleration only ever needing one value and it being calculated already
    
    private double dispUAT(double u, double a, double t) // original: s = ut + 1/2at^2
    {// used as original
        return (u * t) + (0.5 * a * (Math.pow(t, 2)));
    }
    
    private double dispVAT(double v, double a, double t) // original: s = vt - 1/2at^2
    {// used as original
        return (v * t) - (0.5 * a * (Math.pow(t, 2)));
    }
    
    // end displacement section
    // begin initial velocity section
    
    private double initVAT(double v, double a, double t) // original: v = u + at
    {// rearranged to u = v - at
        return v - (a * t);
    }
    
    private double initSAT(double s, double a, double t) // original: s = ut + 1/2at^2
    {// rearranged to (s - 1/2at^2) / t
        return (s - (0.5 * a * (Math.pow(t, 2)))) / t;
    }
    
    private double initSVA(double s, double v, double a) // original: v^2 = u^2 + 2as
    {// rearranged to u = sqrt(v^2 - 2as)
        
        double u = (Math.pow(v, 2)) - (2 * a * s); // har har
        if(u >= 0)
            u = Math.sqrt(u);
        else
            u = -1;
        
        return u; // returns -1 if not valid
    }
    
    // end initial velocity section
    // begin final velocity section
    
    private double finUAT(double u, double a, double t) // v = u + at
    {// used as original
        return u + (a * t);
    }
    
    private double finSUA(double s, double u, double a) // original: v^2 = u^2 + 2as
    {// rearranged to square root both sides
        double v = (Math.pow(u, 2)) + (2 * a * s);
        if(v >= 0)
            v = Math.sqrt(v);
        else
            v = -1;
        
        return v; // returns -1 if not valid
    }
    
    private double finSAT(double s, double a, double t) // original: s = vt - 1/2at^2
    {
        return  (s + (0.5 * a * (Math.pow(t, 2)))) / t;
    }
    
    // acceleration section
    
    private double acclSUV(double s, double u, double v) // original: v^2 = u^2 + 2as
    {// rearranged to (v^2 - u^2) / 2s
        return ((Math.pow(v, 2)) - (Math.pow(u, 2))) / (2 * s);
    }
    
    private double acclSVT(double s, double v, double t) // original: s = vt - 1/2at^2
    {// rearranged to -2(s - vt) / t^2
        return (-2 * (s - (v * t))) / (Math.pow(t, 2));
    }
    
    private double acclSUT(double s, double u, double t) // original: s = ut + 1/2at^2
    {// rearranged to 2(s - ut) / t^2
        return (2 * (s - (u * t))) / (Math.pow(t, 2));
    }
    
    private double acclUVT(double u, double v, double t) // original: v = u + at
    {// rearranged to (v - u) / t
        return (v - u) / t;
    }
    
    // end accel section
    // begin time section
    
    private double timeUVA(double u, double v, double a) // original: v = u + at
    {// rearranged to (v - u) / a
        return (v - u) / a;
    }// double u lol
    
    private double[] timeSUA(double s, double u, double a) // original: s = ut + 1/2at^2
    {// rearranged to 0 = 1/2at^2 + ut - s
        double quada = (0.5 * a);
        double b = u;
        double c = -s;
        double[] t = {0, 0};
        
        if(isQuadSolvEq(quada, b, c) == true)
        {
            t[0] = quadraticPos(quada, b, c);
            t[1] = t[0];
        }
        
        else// if two separate roots
        {
            t[0] = quadraticPos(quada, b, c);
            t[1] = quadraticNeg(quada, b, c);
        }
        
        return t;
    }
    
    // end time section
    // end equation solving
    
    private String[] fillWith(int size, String phrase)
    {
        String[] toReturn = new String[size];
        
        for(int i = 0; i < size; i++)
            toReturn[i] = phrase;
        
        return toReturn;
    }
    
    private boolean isQuadSolvEq(double a, double b, double c)
    {
        return discriminant(a, b, c) == 0;
    }
    
    private boolean isQuadSolv(double a, double b, double c)
    {
        return discriminant(a, b, c) >= 0;
    }
    
    private double discriminant(double a, double b, double c) // returns discrim - can be used to determine suit for quad form
    {
        return (Math.pow(b, 2)) - (4 * a * c); // b^2 - 4ac
    }
    
    private double quadraticPos(double a, double b, double c) // returns + quad form sol
    {
        return (-b + (Math.sqrt(discriminant(a, b, c)))) / (2 * a);
    }
    
    private double quadraticNeg(double a, double b, double c) // returns - quad form sol
    {
        return (-b - (Math.sqrt(discriminant(a, b, c)))) / (2 * a);
    }
    
    private double[] roundDouble(double[] toRound, int dp)
    {
        for(int i = 0; i < toRound.length; i++)
        {
            int multiplier = (int) Math.pow(10, dp);
            toRound[i] *= multiplier;
            if(toRound[i] % 1 >= 0.5) // round up
            {
                toRound[i] =- (toRound[i] % 1);
                toRound[i] += 1;
            }
            
            else
                toRound[i] =- (toRound[i] % 1);
            
            toRound[i] /= multiplier;
        }
        
        return toRound;
    }
    
    private int numOfQuan(boolean[] quanEnt)
    {
        int count = 0;
        for(int i = 0; i < quanEnt.length; i++)
            if(quanEnt[i] == true)
                count++;
        return count;
    }
    
    private void displaySuvatError(boolean[] toDisplay, String[] errors)
    {
        if(toDisplay[0] == false)
            jTextField1.setText(errors[0]);
        if(toDisplay[1] == false)
            jTextField2.setText(errors[1]);
        if(toDisplay[2] == false)
            jTextField3.setText(errors[2]);
        if(toDisplay[3] == false)
            jTextField4.setText(errors[3]);
        if(toDisplay[4] == false)
            jTextField5.setText(errors[4]);
    }
    
    private double[] fetchValues(boolean[] entered) // order: suvat
    {
        double[] toReturn = new double[5];
        if(entered[0] == true)
            toReturn[0] = Double.parseDouble(jTextField1.getText());
        if(entered[1] == true)
            toReturn[1] = Double.parseDouble(jTextField2.getText());
        if(entered[2] == true)
            toReturn[2] = Double.parseDouble(jTextField3.getText());
        if(entered[3] == true)
            toReturn[3] = Double.parseDouble(jTextField4.getText());
        if(entered[4] == true)
            toReturn[4] = Double.parseDouble(jTextField5.getText());
        return toReturn;
    }
    
    private boolean[] checkText() // checks if valid text ent into text field
    {
        boolean[] toReturn = {false, false, false, false, false};
        
        String[] textFields = getTextFields();
        for(int i = 0; i < textFields.length; i++)
            if(!"".equals(textFields[i]))
                if(isNum(textFields[i]) == true)
                    toReturn[i] = true;
        
        return toReturn;
    }
    
    private String[] getTextFields() // returns all text fields as a string array
    {
        String[] toReturn = new String[5];
        toReturn[0] = jTextField1.getText();
        toReturn[1] = jTextField2.getText();
        toReturn[2] = jTextField3.getText();
        toReturn[3] = jTextField4.getText();
        toReturn[4] = jTextField5.getText();
        return toReturn;
    }
    
    private boolean isNum(String toCheck)
    {
        boolean isNum = true;
        boolean hasDecimal = false;
        for(int i = 0; i < toCheck.length(); i++)
        {
            if(toCheck.charAt(i) < '0' || toCheck.charAt(i) > '9')
            {
                if(toCheck.charAt(i) == '.' && hasDecimal == false)
                    hasDecimal = true;
                
                else if(toCheck.charAt(i) != '-' || i != 0) // checking for minus in front of number
                {
                    isNum = false;
                    break;
                }
            }
        }
        return isNum;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(machine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(machine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(machine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(machine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new machine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}